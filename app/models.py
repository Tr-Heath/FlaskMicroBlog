from app import db

ROLE_USER = 0 
ROLE_ADMIN = 1

class User(db.Model):
	id = db.Column(db.Integer, primary_key = True)
	nickname = db.Column(db.String(64), index = True, unique = True)
	email = db.Column(db.String(120), index = True, unique = True)
	role = db.Column(db.SmallInteger, default = ROLE_USER)
	posts = db.relationship('Post', backref = 'author', lazy = 'dynamic')

	def __repr__(self):
		return '<User %r>' % (self.nickname)

	#is_authenticated is a somewhat misleading name, return True 
	#(unless the object represents a User that should not be allowed to authenticate for some reason)
	def is_authenticated(self):
		return True

	#will return True unless the user has been flagged not active (eg. banned)	
	def is_active(self):
		return True

	#return True only for false users that should not be able to log into the system
	def is_anonymous(self):
		return False

	#id should be unicode, will be generated by the database layer.
	def get_id(self):
		return unicode(self.id)

class Post(db.Model):
	id = db.Column(db.Integer, primary_key = True)
	body = db.Column(db.String(140))
	timestamp = db.Column(db.DateTime)
	user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

	def __repr__(self):
		return '<Post %r>' % (self.body)