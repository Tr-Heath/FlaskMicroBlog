from app import db
from hashlib import md5

ROLE_USER = 0 
ROLE_ADMIN = 1

followers = db.Table('followers',
	db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),
	db.Column('followed_id', db.Integer, db.ForeignKey('user.id'))
)


class User(db.Model):
	id = db.Column(db.Integer, primary_key = True)
	nickname = db.Column(db.String(64), index = True, unique = True)
	email = db.Column(db.String(120), index = True, unique = True)
	role = db.Column(db.SmallInteger, default = ROLE_USER)
	posts = db.relationship('Post', backref = 'author', lazy = 'dynamic')
	about_me = db.Column(db.String(140))
	last_seen = db.Column(db.DateTime)
	followed = db.relationship('User',
		secondary = followers,
		primaryjoin = (followers.c.follower_id == id),
		secondaryjoin = (followers.c.followed_id == id),
		backref = db.backref('followers', lazy = 'dynamic'),
		lazy = 'dynamic')

	#is_authenticated is a somewhat misleading name, return True 
	#(unless the object represents a User that should not be allowed to authenticate for some reason)
	def is_authenticated(self):
		return True

	#will return True unless the user has been flagged not active (eg. banned)	
	def is_active(self):
		return True

	#return True only for false users that should not be able to log into the system
	def is_anonymous(self):
		return False

	#id should be unicode, will be generated by the database layer.
	def get_id(self):
		return unicode(self.id)

	def avatar(self, size):
		#d=mm is for the placeholder image "mystery man" and the s=N option is the avatar scale size.
		return 'http://www.gravatar.com/avatar/' + md5(self.email).hexdigest() + '?d=mm&s=' + str(size)

	def is_following(self, user):
		return self.followed.filter(followers.c.followed_id == user.id).count() > 0

	def follow(self, user):
		if not self.is_following(user):
			self.followed.append(user)
			return self

	def unfollow(self, user):
		if self.is_following(user):
			self.followed.remove(user)
			return self

	def followed_posts(self):
		return Post.query
			.join(followers, (followers.c.followed_id == Post.user_id))
			.filter(followers.c.follower_id == self.id)
			.order_by(Post.timestamp.desc())

	def __repr__(self):
		return '<User %r>' % (self.nickname)	

	@staticmethod
	def make_unique_nickname(nickname):
		if User.query.filter_by(nickname = nickname).first() == None:
			return nickname
		version = 2
		while True:
			new_nickname = nickname + str(version)
			if User.query.filter_by(nickname = new_nickname).first() == None:
				break
			version +=1
		return new_nickname

class Post(db.Model):
	id = db.Column(db.Integer, primary_key = True)
	body = db.Column(db.String(140))
	timestamp = db.Column(db.DateTime)
	user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

	def __repr__(self):
		return '<Post %r>' % (self.body)
